#!/usr/bin/env python3

import json

locales = {
        'de': 'german', 'en': 'english', 'es': 'spanish', 'fr': 'french',
        'it': 'italian', 'pt': 'portuguese', 'ru': 'russian'
        }

suppressions = {}

for key in sorted(locales.keys()):
    filename = 'data/cldr/segments/' + key + '/suppressions.json'
    name = locales[key]
    try:
        f = open(filename)
    except:
        f = open('../' + filename)

    with f:
        obj = json.load(f)

    if 'segments' not in obj:
        continue
    segments = obj['segments']
    if 'segmentations' not in segments:
        continue
    segmentations = segments['segmentations']
    if ('SentenceBreak' not in segmentations
            or 'standard' not in segmentations['SentenceBreak']):
        continue
    sentbreak = segmentations['SentenceBreak']['standard']

    supps = []
    for brk in sentbreak:
        if 'suppression' not in brk:
            continue
        s = brk['suppression']
        supps.append(s)

    if len(supps) > 0:
        suppressions[name] = tuple(sorted(supps))

names = sorted(suppressions.keys())

def encode(word):
    enc = ['"']
    for c in bytes(word, 'utf-8'):
        if c < 128:
            enc.append(chr(c))
        else:
            enc.append('\\{0:o}'.format(c))
    enc.append('"')
    return ''.join(enc)


print("/* This file is automatically generated. DO NOT EDIT!")
print("   Instead, edit gen-sentsuppress.py and re-run.  */")
print("")
print("#ifndef SENTSUPPRESS_H")
print("#define SENTSUPPRESS_H")
print("")
print("#include <stddef.h>")
print("#include <stdint.h>")
print("#include <string.h>")
print("")
print("struct sentsuppress_list {")
print("\tconst char *name;")
print("\tint offset;")
print("\tint length;")
print("};")
print("")
print("static const char *sentsuppress_list_names[] = {")
for i in range(len(names)):
    name = names[i]
    print("\t\"", name, "\"", sep="", end="")
    if i + 1 != len(names):
        print(",")
    else:
        print(",")
        print("\tNULL")
print("};")
print("")
print("static struct sentsuppress_list sentsuppress_lists[] = {")
off = 0
for i in range(len(names)):
    name = names[i]
    words = suppressions[name]
    print("\t{\"", name, "\", ", off, ", ", len(words), "}", sep="", end="")
    if i + 1 != len(names):
        print(",")
    else:
        print(",")
        print("\t{NULL, 0, 0}")
    off += len(words) + 1
print("};")
print("")
print("static const char * sentsuppress_strings[] = {")
for i in range(len(names)):
    name = names[i]
    words = suppressions[name]
    j = 0
    if i > 0:
        print("\n")
    print("\t/*", name, "*/", end="")
    for w in words:
        if j % 1 == 0:
            print("\n\t", end="")
        else:
            print(" ", end="")
        print(encode(w), ",", sep="", end="")
        j += 1
    print("\n\tNULL", end="")
    if i + 1 < len(names):
        print(",", end="")
    else:
        print("")
print("};")
print("")
print("static const char **sentsuppress_names(void)")
print("{")
print("\treturn (const char **)sentsuppress_list_names;")
print("}")
print("")
print("static const uint8_t **sentsuppress_list(const char *name, int *lenptr)")
print("{")
print("\tconst struct sentsuppress_list *ptr = sentsuppress_lists;")
print("")
print("\twhile (ptr->name != NULL && strcmp(ptr->name, name) != 0) {")
print("\t\tptr++;")
print("\t}")
print("")
print("\tif (ptr->name == NULL) {")
print("\t\tif(lenptr) {")
print("\t\t\t*lenptr = 0;")
print("\t\t}")
print("\t\treturn NULL;")
print("\t}")
print("")
print("\tif(lenptr) {")
print("\t\t*lenptr = ptr->length;")
print("\t}")
print("\treturn (const uint8_t **)(sentsuppress_strings + ptr->offset);")
print("}")
print("")
print("#endif /* SENTSUPPRESS_H */")
